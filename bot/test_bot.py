#!/usr/bin/env python3
import asyncio
import os
from dotenv import load_dotenv
from telegram.ext import ApplicationBuilder

async def test_bot():
    load_dotenv()
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ ApplicationBuilder
    app = ApplicationBuilder().token(os.getenv('BOT_TOKEN')).build()
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –±–æ—Ç–∞
        bot_info = await app.bot.get_me()
        print(f'‚úÖ Bot info: {bot_info.first_name} (@{bot_info.username})')
        print(f'‚úÖ Bot ID: {bot_info.id}')
        print(f'‚úÖ Can join groups: {bot_info.can_join_groups}')
        print(f'‚úÖ Can read all group messages: {bot_info.can_read_all_group_messages}')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
        print(f'‚úÖ BOT_TOKEN: {os.getenv("BOT_TOKEN", "NOT_SET")[:20]}...')
        print(f'‚úÖ LOCAL_ONBOARDING_URL: {os.getenv("LOCAL_ONBOARDING_URL", "NOT_SET")}')
        
        return True
        
    except Exception as e:
        print(f'‚ùå Error: {e}')
        return False
    finally:
        await app.shutdown()

if __name__ == "__main__":
    success = asyncio.run(test_bot())
    if success:
        print("\nüéâ Bot test successful! You can now run the main bot.")
    else:
        print("\nüí• Bot test failed. Check the error above.")
