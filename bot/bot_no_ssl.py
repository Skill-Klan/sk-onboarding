#!/usr/bin/env python3
"""
Telegram Bot –±–µ–∑ SSL –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥—É –ø—Ä–æ–±–ª–µ–º –∑ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞–º–∏
"""

import os
import logging
import asyncio
import ssl
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û—Ç—Ä–∏–º—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")
    exit(1)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –±–µ–∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤—ñ—Ç {user.mention_html()}! üëã\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help"""
    help_text = """
ü§ñ **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**

/start - –ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É –∑ –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
/status - –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
/health - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤'—è

üì± **–§—É–Ω–∫—Ü—ñ—ó:**
- –õ–æ–∫–∞–ª—å–Ω–∏–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
- FAQ —Å–∏—Å—Ç–µ–º–∞
- Health check endpoints
    """
    await update.message.reply_text(help_text, parse_mode='Markdown')

async def status_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /status"""
    status_text = """
‚úÖ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**
- –ë–æ—Ç –∞–∫—Ç–∏–≤–Ω–∏–π —Ç–∞ –ø—Ä–∞—Ü—é—î
- SSL –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞
- Health check –¥–æ—Å—Ç—É–ø–Ω–∏–π –Ω–∞ –ø–æ—Ä—Ç—É 8081
- –í–µ—Ä—Å—ñ—è: 2.0 (–±–µ–∑ SSL)
    """
    await update.message.reply_text(status_text, parse_mode='Markdown')

async def health_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /health"""
    health_text = """
üè• **Health Check:**
- –ë–æ—Ç: ‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π
- Health server: ‚úÖ –ó–∞–ø—É—â–µ–Ω–∏–π
- –ü–æ—Ä—Ç 8081: ‚úÖ –í—ñ–¥–∫—Ä–∏—Ç–∏–π
- SSL: ‚ö†Ô∏è –í—ñ–¥–∫–ª—é—á–µ–Ω–æ (–¥–ª—è —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)
    """
    await update.message.reply_text(health_text, parse_mode='Markdown')

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å"""
    await update.message.reply_text(f"–í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏: {update.message.text}")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫"""
    logger.error("Exception while handling an update:", exc_info=context.exception)

def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞—é Telegram Bot –±–µ–∑ SSL –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏...")
    
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–æ–¥–∞—Ç–æ–∫ –∑ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("status", status_command))
        application.add_handler(CommandHandler("health", health_command))
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
        
        # –î–æ–¥–∞—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("‚úÖ –ë–æ—Ç –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ, –∑–∞–ø—É—Å–∫–∞—é polling...")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞ –∑ SSL –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        application.run_polling(
            ssl_context=ssl_context,
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )
        
    except Exception as e:
        logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")
        raise

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞: {e}")
        exit(1)
