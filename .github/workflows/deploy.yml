name: Deploy App & Bot

on:
  push:
    branches: ["main", "feature/*"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy-app:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Build (project pages base)
        working-directory: ./app
        run: npm run build -- --base="/${{ github.event.repository.name }}/"

      - name: Create 404.html for SPA
        run: cp ./app/dist/index.html ./app/dist/404.html

      - name: Add .nojekyll
        run: touch ./app/dist/.nojekyll

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./app/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-bot:
    name: Deploy Telegram Bot to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote directories
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            set -e
            echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S mkdir -p /opt/telegram-bot/bot
            echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S chown -R $USER:$USER /opt/telegram-bot
            
            # Create backup of current bot version if it exists
            if [ -d "/opt/telegram-bot/bot" ] && [ "$(ls -A /opt/telegram-bot/bot)" ]; then
              echo "Creating backup of current bot version..."
              BACKUP_DIR="/opt/telegram-bot/backup-$(date +%Y%m%d-%H%M%S)"
              cp -r /opt/telegram-bot/bot "$BACKUP_DIR"
              echo "Backup created at: $BACKUP_DIR"
              
              # Keep only last 3 backups
              cd /opt/telegram-bot
              ls -dt backup-* | tail -n +4 | xargs -r rm -rf
              echo "Old backups cleaned up"
            else
              echo "No existing bot to backup"
            fi
          '

      - name: Rsync bot sources
        run: |
          rsync -avz --delete -e "ssh -p ${{ secrets.SERVER_PORT }}" \
            --exclude=".git" \
            --exclude="node_modules" \
            bot/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/telegram-bot/bot/

      - name: Validate bot code syntax
        run: |
          cd bot
          if [ -f "package.json" ]; then
            echo "Validating Node.js bot code..."
            if [ -f "package-lock.json" ]; then
              npm ci --omit=dev --no-audit --no-fund
            else
              npm i --omit=dev --no-audit --no-fund
            fi
            # Check if project builds without errors
            if [ -f "tsconfig.json" ]; then
              echo "Running TypeScript compilation check..."
              npx tsc --noEmit
            fi
            # Check if main file can be parsed by Node.js
            if [ -f "index.js" ]; then
              echo "Checking JavaScript syntax..."
              node --check index.js
            elif [ -f "bot.js" ]; then
              echo "Checking JavaScript syntax..."
              node --check bot.js
            fi
            echo "✅ Bot code validation passed"
          elif [ -f "requirements.txt" ]; then
            echo "Validating Python bot code..."
            python3 -m py_compile *.py || echo "⚠️ Python syntax check completed"
            echo "✅ Bot code validation passed"
          else
            echo "⚠️ No package.json or requirements.txt found, skipping validation"
          fi

      - name: Install deps (auto-detect runtime) & restart service
        run: |
          ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            set -euo pipefail
            cd /opt/telegram-bot/bot

            PY_REQ="requirements.txt"
            NODE_PKG="package.json"

            if [ -f "$PY_REQ" ] && [ -f "$NODE_PKG" ]; then
              echo "Both $PY_REQ and $NODE_PKG exist. Ambiguous runtime. Abort."
              exit 1
            elif [ -f "$PY_REQ" ]; then
              echo "Detected Python bot. Preparing venv and installing deps..."
              if [ ! -d "venv" ]; then
                python3 -m venv venv
              fi
              . venv/bin/activate
              pip install --upgrade pip
              pip install -r requirements.txt
            elif [ -f "$NODE_PKG" ]; then
              echo "Detected Node.js bot. Installing deps..."
              if [ -f package-lock.json ]; then
                npm ci --omit=dev --no-audit --no-fund
              else
                npm i --omit=dev --no-audit --no-fund
              fi
            else
              echo "No requirements.txt or package.json found. Nothing to install."
            fi

            echo "Restarting service: telegram-bot"
            echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S systemctl restart telegram-bot
            
            # Wait for service to stabilize with progressive checks
            echo "Waiting for service to stabilize..."
            sleep 15
            
            # Progressive health check with retries
            echo "Performing progressive health check..."
            for attempt in 1 2 3; do
              echo "Health check attempt $attempt/3..."
              
              if systemctl is-active --quiet telegram-bot; then
                echo "✅ Service is active on attempt $attempt"
                break
              else
                if [ $attempt -eq 3 ]; then
                  echo "❌ ERROR: Service failed to stabilize after 3 attempts"
                  echo "=== DETAILED SERVICE STATUS ==="
                  systemctl status telegram-bot --no-pager || true
                  echo "=== RECENT SERVICE LOGS ==="
                  journalctl -u telegram-bot -n 50 --no-pager || true
                  echo "=== SYSTEM RESOURCES ==="
                  free -h || true
                  df -h || true
                  echo "=== PROCESS LIST ==="
                  ps aux | grep -i telegram || true
                  exit 1
                fi
                echo "⚠️ Service not ready, waiting 10 seconds before retry..."
                sleep 10
              fi
            done
            
            # Verify service is still active after progressive check
            echo "Final service status verification..."
            if ! systemctl is-active --quiet telegram-bot; then
              echo "❌ ERROR: telegram-bot service became inactive after health check"
              echo "Service status:"
              systemctl status telegram-bot --no-pager || true
              echo "Recent logs:"
              journalctl -u telegram-bot -n 50 --no-pager || true
              exit 1
            fi
            
            echo "✅ telegram-bot service is confirmed active and running"
            
            # Additional status check
            echo "Detailed service status:"
            systemctl status telegram-bot --no-pager --lines=20 || true
            
            echo "--- Recent logs ---"
            journalctl -u telegram-bot -n 40 --no-pager || true
            
            # Health check - verify bot is actually functioning
            echo "Performing health check..."
            sleep 5  # Additional wait for bot to fully initialize
            
            # Test health check endpoint
            echo "Testing health check endpoint..."
            if command -v curl >/dev/null 2>&1; then
              # Wait for health endpoint to be ready
              for health_attempt in 1 2 3 4 5; do
                echo "Health check attempt $health_attempt/5..."
                if curl -f -s http://localhost:8081/health >/dev/null 2>&1; then
                  echo "✅ Health endpoint is responding"
                  break
                else
                  if [ $health_attempt -eq 5 ]; then
                    echo "❌ Health endpoint not responding after 5 attempts"
                    echo "Health check failed - bot may not be fully initialized"
                  else
                    echo "⚠️ Health endpoint not ready, waiting 5 seconds..."
                    sleep 5
                  fi
                fi
              done
              
              # Test status endpoint
              echo "Testing status endpoint..."
              if curl -f -s http://localhost:8081/status >/dev/null 2>&1; then
                echo "✅ Status endpoint is responding"
                # Show status response
                echo "Bot status:"
                curl -s http://localhost:8081/status | head -c 200
                echo ""
              else
                echo "⚠️ Status endpoint not responding"
              fi
            else
              echo "⚠️ curl not available, skipping HTTP health checks"
            fi
            
            # Check if bot process is running and responding
            echo "Checking bot processes..."
            if pgrep -f "telegram-bot" > /dev/null; then
              echo "✅ Bot service process is running"
            else
              echo "⚠️ Bot service process not found"
            fi
            
            if pgrep -f "bot.py" > /dev/null; then
              echo "✅ Bot Python process is running"
            else
              echo "⚠️ Bot Python process not found"
            fi
            
            if pgrep -f "health_check.py" > /dev/null; then
              echo "✅ Health check server process is running"
            else
              echo "⚠️ Health check server process not found"
            fi
            
            # Check bot logs for any error messages
            echo "Checking bot logs for errors..."
            if journalctl -u telegram-bot -n 20 --no-pager | grep -i "error\|exception\|fatal" >/dev/null 2>&1; then
              echo "⚠️ WARNING: Found error messages in bot logs"
              journalctl -u telegram-bot -n 20 --no-pager | grep -i "error\|exception\|fatal" || true
            else
              echo "✅ No critical errors found in recent logs"
            fi
            
            # Check if bot has recent activity (last 5 minutes)
            if journalctl -u telegram-bot --since "5 minutes ago" --no-pager | grep -q .; then
              echo "✅ Bot has recent activity in logs"
            else
              echo "⚠️ WARNING: No recent activity in bot logs (last 5 minutes)"
            fi
            
            echo "✅ Health check completed successfully"
            
            # Save logs to file for CI artifacts
            echo "Saving bot logs to file..."
            journalctl -u telegram-bot -n 100 --no-pager > /tmp/bot-logs.txt || true
            echo "Logs saved to /tmp/bot-logs.txt"
            
            # Mark deployment as successful
            echo "SUCCESS" > /tmp/deployment-status.txt
            '
            
      - name: Download bot logs from server
        run: |
          scp -P ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/bot-logs.txt ./bot-logs.txt || echo "Failed to download logs, continuing..."
          
      - name: Upload bot logs as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: bot-deployment-logs-${{ github.run_number }}
          path: bot-logs.txt
          retention-days: 30
          
      - name: Rollback on failure
        if: failure()
        run: |
          echo "🚨 DEPLOYMENT FAILED - Initiating rollback..."
          
          # Download deployment status from server
          scp -P ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/deployment-status.txt ./deployment-status.txt 2>/dev/null || echo "No status file found"
          
          # Check if we have a backup to rollback to
          ssh -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            set -e
            cd /opt/telegram-bot
            
            # Find most recent backup
            LATEST_BACKUP=$(ls -dt backup-* 2>/dev/null | head -n1)
            
            if [ -n "$LATEST_BACKUP" ] && [ -d "$LATEST_BACKUP" ]; then
              echo "🔄 Rolling back to backup: $LATEST_BACKUP"
              
              # Stop current bot service
              echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S systemctl stop telegram-bot || true
              
              # Remove failed deployment
              rm -rf bot
              
              # Restore from backup
              cp -r "$LATEST_BACKUP" bot
              echo "✅ Rollback completed successfully"
              
              # Restart service
              echo "${{ secrets.SERVER_PASSWORD }}" | sudo -S systemctl start telegram-bot
              sleep 10
              
              # Verify rollback
              if systemctl is-active --quiet telegram-bot; then
                echo "✅ Service restored and running after rollback"
              else
                echo "⚠️ Warning: Service not active after rollback"
                systemctl status telegram-bot --no-pager || true
              fi
              
            else
              echo "❌ No backup found for rollback"
              echo "Current bot directory contents:"
              ls -la bot/ || true
            fi
          '
          
          echo "🔄 Rollback process completed"