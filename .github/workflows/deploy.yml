name: Deploy App & Bot

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  deploy-app:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: app/package-lock.json

      - name: Install dependencies
        working-directory: ./app
        run: npm ci --prefer-offline --no-audit --no-fund

      - name: Build (project pages base)
        working-directory: ./app
        run: npm run build -- --base="/${{ github.event.repository.name }}/"

      - name: Create 404.html for SPA
        run: cp ./app/dist/index.html ./app/dist/404.html

      - name: Add .nojekyll
        run: touch ./app/dist/.nojekyll

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./app/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-bot:
    name: Deploy Telegram Bot to Server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Validate secrets
        run: |
          [[ -n "${{ secrets.SERVER_HOST }}" ]] || { echo "SERVER_HOST is empty"; exit 1; }
          [[ -n "${{ secrets.SERVER_USER }}" ]] || { echo "SERVER_USER is empty"; exit 1; }
          [[ -n "${{ secrets.SERVER_PORT }}" && "${{ secrets.SERVER_PORT }}" =~ ^[0-9]+$ ]] || { echo "SERVER_PORT must be a number"; exit 1; }

      - name: Add server to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Ensure remote directories
        run: |
          ssh -o BatchMode=yes -o IdentitiesOnly=yes -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            set -euo pipefail
            sudo -n mkdir -p /opt/telegram-bot/bot
            sudo -n chown -R "$(id -un)":"$(id -gn)" /opt/telegram-bot
          '

      - name: Rsync bot sources
        run: |
          rsync -avz --delete -e "ssh -o BatchMode=yes -o IdentitiesOnly=yes -p ${{ secrets.SERVER_PORT }}" \
            --exclude=".git" \
            --exclude="node_modules" \
            bot/ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/telegram-bot/bot/

      - name: Install Python deps & restart service
        run: |
          ssh -o BatchMode=yes -o IdentitiesOnly=yes -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            set -euo pipefail
            cd /opt/telegram-bot/bot

            if [ ! -d venv ]; then
              python3 -m venv venv
            fi
            . venv/bin/activate
            python3 -V
            pip -V
            pip install --upgrade pip
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            fi

            sudo -n systemctl restart telegram-bot
            systemctl is-active --quiet telegram-bot && echo "Service is active"
            journalctl -u telegram-bot -n 80 --no-pager || true
          '